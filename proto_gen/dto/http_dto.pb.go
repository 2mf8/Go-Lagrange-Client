// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: http_dto.proto

package dto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Captcha_CaptchaType int32

const (
	Captcha_PIC_CAPTCHA                Captcha_CaptchaType = 0
	Captcha_SLIDER_CAPTCHA             Captcha_CaptchaType = 1
	Captcha_UNSAFE_DEVICE_LOGIN_VERIFY Captcha_CaptchaType = 2
	Captcha_SMS                        Captcha_CaptchaType = 4
)

var Captcha_CaptchaType_name = map[int32]string{
	0: "PIC_CAPTCHA",
	1: "SLIDER_CAPTCHA",
	2: "UNSAFE_DEVICE_LOGIN_VERIFY",
	4: "SMS",
}

var Captcha_CaptchaType_value = map[string]int32{
	"PIC_CAPTCHA":                0,
	"SLIDER_CAPTCHA":             1,
	"UNSAFE_DEVICE_LOGIN_VERIFY": 2,
	"SMS":                        4,
}

func (x Captcha_CaptchaType) String() string {
	return proto.EnumName(Captcha_CaptchaType_name, int32(x))
}

func (Captcha_CaptchaType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3b5f7d4a2149a8d0, []int{7, 0}
}

type Bot struct {
	BotId                int64    `protobuf:"varint,1,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	IsOnline             bool     `protobuf:"varint,2,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Bot) Reset()         { *m = Bot{} }
func (m *Bot) String() string { return proto.CompactTextString(m) }
func (*Bot) ProtoMessage()    {}
func (*Bot) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b5f7d4a2149a8d0, []int{0}
}
func (m *Bot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bot.Merge(m, src)
}
func (m *Bot) XXX_Size() int {
	return m.Size()
}
func (m *Bot) XXX_DiscardUnknown() {
	xxx_messageInfo_Bot.DiscardUnknown(m)
}

var xxx_messageInfo_Bot proto.InternalMessageInfo

func (m *Bot) GetBotId() int64 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *Bot) GetIsOnline() bool {
	if m != nil {
		return m.IsOnline
	}
	return false
}

// 创建机器人 /bot/create/v1/
type CreateBotReq struct {
	BotId                int64    `protobuf:"varint,1,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateBotReq) Reset()         { *m = CreateBotReq{} }
func (m *CreateBotReq) String() string { return proto.CompactTextString(m) }
func (*CreateBotReq) ProtoMessage()    {}
func (*CreateBotReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b5f7d4a2149a8d0, []int{1}
}
func (m *CreateBotReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateBotReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateBotReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateBotReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBotReq.Merge(m, src)
}
func (m *CreateBotReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateBotReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBotReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBotReq proto.InternalMessageInfo

func (m *CreateBotReq) GetBotId() int64 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *CreateBotReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type CreateBotResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateBotResp) Reset()         { *m = CreateBotResp{} }
func (m *CreateBotResp) String() string { return proto.CompactTextString(m) }
func (*CreateBotResp) ProtoMessage()    {}
func (*CreateBotResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b5f7d4a2149a8d0, []int{2}
}
func (m *CreateBotResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateBotResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateBotResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateBotResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBotResp.Merge(m, src)
}
func (m *CreateBotResp) XXX_Size() int {
	return m.Size()
}
func (m *CreateBotResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBotResp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBotResp proto.InternalMessageInfo

// 查询机器人 /bot/list/v1/
type ListBotReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListBotReq) Reset()         { *m = ListBotReq{} }
func (m *ListBotReq) String() string { return proto.CompactTextString(m) }
func (*ListBotReq) ProtoMessage()    {}
func (*ListBotReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b5f7d4a2149a8d0, []int{3}
}
func (m *ListBotReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBotReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBotReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBotReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBotReq.Merge(m, src)
}
func (m *ListBotReq) XXX_Size() int {
	return m.Size()
}
func (m *ListBotReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBotReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListBotReq proto.InternalMessageInfo

type ListBotResp struct {
	BotList              []*Bot   `protobuf:"bytes,1,rep,name=bot_list,json=botList,proto3" json:"bot_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListBotResp) Reset()         { *m = ListBotResp{} }
func (m *ListBotResp) String() string { return proto.CompactTextString(m) }
func (*ListBotResp) ProtoMessage()    {}
func (*ListBotResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b5f7d4a2149a8d0, []int{4}
}
func (m *ListBotResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBotResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBotResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBotResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBotResp.Merge(m, src)
}
func (m *ListBotResp) XXX_Size() int {
	return m.Size()
}
func (m *ListBotResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBotResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListBotResp proto.InternalMessageInfo

func (m *ListBotResp) GetBotList() []*Bot {
	if m != nil {
		return m.BotList
	}
	return nil
}

// 机器人登陆 /bot/login/v1/
type BotLoginAsyncReq struct {
	BotId                int64    `protobuf:"varint,1,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BotLoginAsyncReq) Reset()         { *m = BotLoginAsyncReq{} }
func (m *BotLoginAsyncReq) String() string { return proto.CompactTextString(m) }
func (*BotLoginAsyncReq) ProtoMessage()    {}
func (*BotLoginAsyncReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b5f7d4a2149a8d0, []int{5}
}
func (m *BotLoginAsyncReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BotLoginAsyncReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BotLoginAsyncReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BotLoginAsyncReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BotLoginAsyncReq.Merge(m, src)
}
func (m *BotLoginAsyncReq) XXX_Size() int {
	return m.Size()
}
func (m *BotLoginAsyncReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BotLoginAsyncReq.DiscardUnknown(m)
}

var xxx_messageInfo_BotLoginAsyncReq proto.InternalMessageInfo

func (m *BotLoginAsyncReq) GetBotId() int64 {
	if m != nil {
		return m.BotId
	}
	return 0
}

type BotLoginAsyncResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BotLoginAsyncResp) Reset()         { *m = BotLoginAsyncResp{} }
func (m *BotLoginAsyncResp) String() string { return proto.CompactTextString(m) }
func (*BotLoginAsyncResp) ProtoMessage()    {}
func (*BotLoginAsyncResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b5f7d4a2149a8d0, []int{6}
}
func (m *BotLoginAsyncResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BotLoginAsyncResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BotLoginAsyncResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BotLoginAsyncResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BotLoginAsyncResp.Merge(m, src)
}
func (m *BotLoginAsyncResp) XXX_Size() int {
	return m.Size()
}
func (m *BotLoginAsyncResp) XXX_DiscardUnknown() {
	xxx_messageInfo_BotLoginAsyncResp.DiscardUnknown(m)
}

var xxx_messageInfo_BotLoginAsyncResp proto.InternalMessageInfo

type Captcha struct {
	BotId       int64               `protobuf:"varint,1,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	CaptchaType Captcha_CaptchaType `protobuf:"varint,2,opt,name=captcha_type,json=captchaType,proto3,enum=dto.Captcha_CaptchaType" json:"captcha_type,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*Captcha_Url
	//	*Captcha_Image
	Data                 isCaptcha_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Captcha) Reset()         { *m = Captcha{} }
func (m *Captcha) String() string { return proto.CompactTextString(m) }
func (*Captcha) ProtoMessage()    {}
func (*Captcha) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b5f7d4a2149a8d0, []int{7}
}
func (m *Captcha) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Captcha) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Captcha.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Captcha) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Captcha.Merge(m, src)
}
func (m *Captcha) XXX_Size() int {
	return m.Size()
}
func (m *Captcha) XXX_DiscardUnknown() {
	xxx_messageInfo_Captcha.DiscardUnknown(m)
}

var xxx_messageInfo_Captcha proto.InternalMessageInfo

type isCaptcha_Data interface {
	isCaptcha_Data()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Captcha_Url struct {
	Url string `protobuf:"bytes,3,opt,name=url,proto3,oneof" json:"url,omitempty"`
}
type Captcha_Image struct {
	Image []byte `protobuf:"bytes,4,opt,name=image,proto3,oneof" json:"image,omitempty"`
}

func (*Captcha_Url) isCaptcha_Data()   {}
func (*Captcha_Image) isCaptcha_Data() {}

func (m *Captcha) GetData() isCaptcha_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Captcha) GetBotId() int64 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *Captcha) GetCaptchaType() Captcha_CaptchaType {
	if m != nil {
		return m.CaptchaType
	}
	return Captcha_PIC_CAPTCHA
}

func (m *Captcha) GetUrl() string {
	if x, ok := m.GetData().(*Captcha_Url); ok {
		return x.Url
	}
	return ""
}

func (m *Captcha) GetImage() []byte {
	if x, ok := m.GetData().(*Captcha_Image); ok {
		return x.Image
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Captcha) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Captcha_Url)(nil),
		(*Captcha_Image)(nil),
	}
}

// 获取验证码 /captcha/list/v1/
type GetCaptchaListReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCaptchaListReq) Reset()         { *m = GetCaptchaListReq{} }
func (m *GetCaptchaListReq) String() string { return proto.CompactTextString(m) }
func (*GetCaptchaListReq) ProtoMessage()    {}
func (*GetCaptchaListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b5f7d4a2149a8d0, []int{8}
}
func (m *GetCaptchaListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCaptchaListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCaptchaListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCaptchaListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCaptchaListReq.Merge(m, src)
}
func (m *GetCaptchaListReq) XXX_Size() int {
	return m.Size()
}
func (m *GetCaptchaListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCaptchaListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetCaptchaListReq proto.InternalMessageInfo

type GetCaptchaListResp struct {
	CaptchaList          []*Captcha `protobuf:"bytes,1,rep,name=captcha_list,json=captchaList,proto3" json:"captcha_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetCaptchaListResp) Reset()         { *m = GetCaptchaListResp{} }
func (m *GetCaptchaListResp) String() string { return proto.CompactTextString(m) }
func (*GetCaptchaListResp) ProtoMessage()    {}
func (*GetCaptchaListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b5f7d4a2149a8d0, []int{9}
}
func (m *GetCaptchaListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCaptchaListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCaptchaListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCaptchaListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCaptchaListResp.Merge(m, src)
}
func (m *GetCaptchaListResp) XXX_Size() int {
	return m.Size()
}
func (m *GetCaptchaListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCaptchaListResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetCaptchaListResp proto.InternalMessageInfo

func (m *GetCaptchaListResp) GetCaptchaList() []*Captcha {
	if m != nil {
		return m.CaptchaList
	}
	return nil
}

// 处理验证码 /captcha/solve/v1/
type SolveCaptchaReq struct {
	BotId                int64    `protobuf:"varint,1,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	Result               string   `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SolveCaptchaReq) Reset()         { *m = SolveCaptchaReq{} }
func (m *SolveCaptchaReq) String() string { return proto.CompactTextString(m) }
func (*SolveCaptchaReq) ProtoMessage()    {}
func (*SolveCaptchaReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b5f7d4a2149a8d0, []int{10}
}
func (m *SolveCaptchaReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SolveCaptchaReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SolveCaptchaReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SolveCaptchaReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolveCaptchaReq.Merge(m, src)
}
func (m *SolveCaptchaReq) XXX_Size() int {
	return m.Size()
}
func (m *SolveCaptchaReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SolveCaptchaReq.DiscardUnknown(m)
}

var xxx_messageInfo_SolveCaptchaReq proto.InternalMessageInfo

func (m *SolveCaptchaReq) GetBotId() int64 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *SolveCaptchaReq) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type SolveCaptchaResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SolveCaptchaResp) Reset()         { *m = SolveCaptchaResp{} }
func (m *SolveCaptchaResp) String() string { return proto.CompactTextString(m) }
func (*SolveCaptchaResp) ProtoMessage()    {}
func (*SolveCaptchaResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b5f7d4a2149a8d0, []int{11}
}
func (m *SolveCaptchaResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SolveCaptchaResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SolveCaptchaResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SolveCaptchaResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SolveCaptchaResp.Merge(m, src)
}
func (m *SolveCaptchaResp) XXX_Size() int {
	return m.Size()
}
func (m *SolveCaptchaResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SolveCaptchaResp.DiscardUnknown(m)
}

var xxx_messageInfo_SolveCaptchaResp proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("dto.Captcha_CaptchaType", Captcha_CaptchaType_name, Captcha_CaptchaType_value)
	proto.RegisterType((*Bot)(nil), "dto.Bot")
	proto.RegisterType((*CreateBotReq)(nil), "dto.CreateBotReq")
	proto.RegisterType((*CreateBotResp)(nil), "dto.CreateBotResp")
	proto.RegisterType((*ListBotReq)(nil), "dto.ListBotReq")
	proto.RegisterType((*ListBotResp)(nil), "dto.ListBotResp")
	proto.RegisterType((*BotLoginAsyncReq)(nil), "dto.BotLoginAsyncReq")
	proto.RegisterType((*BotLoginAsyncResp)(nil), "dto.BotLoginAsyncResp")
	proto.RegisterType((*Captcha)(nil), "dto.Captcha")
	proto.RegisterType((*GetCaptchaListReq)(nil), "dto.GetCaptchaListReq")
	proto.RegisterType((*GetCaptchaListResp)(nil), "dto.GetCaptchaListResp")
	proto.RegisterType((*SolveCaptchaReq)(nil), "dto.SolveCaptchaReq")
	proto.RegisterType((*SolveCaptchaResp)(nil), "dto.SolveCaptchaResp")
}

func init() { proto.RegisterFile("http_dto.proto", fileDescriptor_3b5f7d4a2149a8d0) }

var fileDescriptor_3b5f7d4a2149a8d0 = []byte{
	// 548 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0xcd, 0x6a, 0xdb, 0x4c,
	0x14, 0xb5, 0x2c, 0xc7, 0x3f, 0x57, 0x8e, 0xad, 0xdc, 0xef, 0xb3, 0x2b, 0x54, 0x30, 0x46, 0xdd,
	0xb8, 0x50, 0x52, 0x70, 0x57, 0xa5, 0x50, 0x2a, 0x2b, 0x4a, 0x2c, 0x70, 0x93, 0x20, 0xa5, 0x81,
	0xd2, 0x85, 0x90, 0xad, 0x21, 0x11, 0xb8, 0x9e, 0xa9, 0x66, 0x92, 0xe2, 0x37, 0xe9, 0x5b, 0xf4,
	0x35, 0xba, 0xec, 0x23, 0x14, 0x77, 0xdf, 0x67, 0x28, 0x92, 0xfc, 0x23, 0xbb, 0xf6, 0x4a, 0x9c,
	0x73, 0xaf, 0xce, 0xdc, 0x7b, 0xe6, 0x30, 0xd0, 0xb8, 0x17, 0x82, 0xf9, 0xa1, 0xa0, 0xa7, 0x2c,
	0xa6, 0x82, 0xa2, 0x1c, 0x0a, 0x6a, 0xbc, 0x06, 0x79, 0x40, 0x05, 0xb6, 0xa0, 0x3c, 0xa6, 0xc2,
	0x8f, 0x42, 0x4d, 0xea, 0x4a, 0x3d, 0xd9, 0x3d, 0x1a, 0x53, 0xe1, 0x84, 0xf8, 0x14, 0x6a, 0x11,
	0xf7, 0xe9, 0x6c, 0x1a, 0xcd, 0x88, 0x56, 0xec, 0x4a, 0xbd, 0xaa, 0x5b, 0x8d, 0xf8, 0x55, 0x8a,
	0x0d, 0x13, 0xea, 0x56, 0x4c, 0x02, 0x41, 0x06, 0x54, 0xb8, 0xe4, 0xcb, 0x21, 0x0d, 0x1d, 0xaa,
	0x2c, 0xe0, 0xfc, 0x2b, 0x8d, 0xc3, 0x54, 0xa2, 0xe6, 0xae, 0xb1, 0xd1, 0x84, 0xe3, 0x9c, 0x04,
	0x67, 0x46, 0x1d, 0x60, 0x14, 0x71, 0x91, 0x29, 0x1a, 0x7d, 0x50, 0xd6, 0x88, 0x33, 0x7c, 0x06,
	0xd5, 0xe4, 0x80, 0x69, 0xc4, 0x85, 0x26, 0x75, 0xe5, 0x9e, 0xd2, 0xaf, 0x9e, 0x26, 0xeb, 0x24,
	0xf5, 0xca, 0x98, 0x8a, 0xa4, 0xd7, 0x78, 0x0e, 0xea, 0x80, 0x8a, 0x11, 0xbd, 0x8b, 0x66, 0x26,
	0x9f, 0xcf, 0x26, 0x87, 0x27, 0x33, 0xfe, 0x83, 0x93, 0x9d, 0x56, 0xce, 0x8c, 0x3f, 0x12, 0x54,
	0xac, 0x80, 0x89, 0xc9, 0x7d, 0x70, 0x68, 0xa3, 0x37, 0x50, 0x9f, 0x64, 0x1d, 0xbe, 0x98, 0xb3,
	0xcc, 0x98, 0x46, 0x5f, 0x4b, 0x67, 0x59, 0xfe, 0xba, 0xfa, 0xde, 0xcc, 0x19, 0x71, 0x95, 0xc9,
	0x06, 0x20, 0x82, 0xfc, 0x10, 0x4f, 0x35, 0x39, 0x71, 0x62, 0x58, 0x70, 0x13, 0x80, 0x6d, 0x38,
	0x8a, 0x3e, 0x07, 0x77, 0x44, 0x2b, 0x75, 0xa5, 0x5e, 0x7d, 0x58, 0x70, 0x33, 0x68, 0x7c, 0x02,
	0x25, 0xa7, 0x83, 0x4d, 0x50, 0xae, 0x1d, 0xcb, 0xb7, 0xcc, 0xeb, 0x1b, 0x6b, 0x68, 0xaa, 0x05,
	0x44, 0x68, 0x78, 0x23, 0xe7, 0xcc, 0x76, 0xd7, 0x9c, 0x84, 0x1d, 0xd0, 0x3f, 0x5c, 0x7a, 0xe6,
	0xb9, 0xed, 0x9f, 0xd9, 0xb7, 0x8e, 0x65, 0xfb, 0xa3, 0xab, 0x0b, 0xe7, 0xd2, 0xbf, 0xb5, 0x5d,
	0xe7, 0xfc, 0xa3, 0x5a, 0xc4, 0x0a, 0xc8, 0xde, 0x7b, 0x4f, 0x2d, 0x0d, 0xca, 0x50, 0x0a, 0x03,
	0x11, 0x24, 0x2e, 0x5c, 0x10, 0xb1, 0x3c, 0x27, 0xb1, 0x30, 0x71, 0xde, 0x06, 0xdc, 0x25, 0x39,
	0xc3, 0x97, 0x9b, 0xc5, 0x73, 0x97, 0x50, 0xcf, 0x2f, 0xbe, 0x5e, 0x36, 0xbd, 0x8c, 0x77, 0xd0,
	0xf4, 0xe8, 0xf4, 0x91, 0xac, 0x8a, 0x87, 0x53, 0xd2, 0x86, 0x72, 0x4c, 0xf8, 0xc3, 0x54, 0x2c,
	0x33, 0xb2, 0x44, 0x06, 0x82, 0xba, 0xad, 0xc0, 0x59, 0xff, 0x7b, 0x11, 0x94, 0xa1, 0x10, 0xcc,
	0x23, 0xf1, 0x63, 0x34, 0x21, 0xd8, 0x87, 0xda, 0x3a, 0x45, 0x78, 0x92, 0x4d, 0x93, 0x0b, 0xa6,
	0x8e, 0xbb, 0x14, 0x67, 0xf8, 0x02, 0x2a, 0xcb, 0x68, 0x61, 0x33, 0x2d, 0x6f, 0x62, 0xa7, 0xab,
	0xdb, 0x04, 0x67, 0xf8, 0x16, 0x8e, 0xb7, 0x92, 0x82, 0xad, 0x55, 0xf0, 0xb6, 0x82, 0xa6, 0xb7,
	0xf7, 0xd1, 0x9c, 0xa1, 0x09, 0x8d, 0x6d, 0x3b, 0x31, 0xeb, 0xfc, 0xc7, 0x78, 0xfd, 0xc9, 0x5e,
	0x9e, 0xb3, 0x24, 0x74, 0x79, 0x23, 0xf0, 0xff, 0xb4, 0x71, 0xc7, 0x5d, 0xbd, 0xb5, 0x87, 0xe5,
	0x6c, 0xa0, 0xfe, 0x58, 0x74, 0xa4, 0x9f, 0x8b, 0x8e, 0xf4, 0x6b, 0xd1, 0x91, 0xbe, 0xfd, 0xee,
	0x14, 0xc6, 0xe5, 0xf4, 0x0d, 0x78, 0xf5, 0x37, 0x00, 0x00, 0xff, 0xff, 0xf5, 0xef, 0x26, 0x41,
	0x15, 0x04, 0x00, 0x00,
}

func (m *Bot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsOnline {
		i--
		if m.IsOnline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.BotId != 0 {
		i = encodeVarintHttpDto(dAtA, i, uint64(m.BotId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateBotReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateBotReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateBotReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintHttpDto(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if m.BotId != 0 {
		i = encodeVarintHttpDto(dAtA, i, uint64(m.BotId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateBotResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateBotResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateBotResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ListBotReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBotReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBotReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ListBotResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBotResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBotResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BotList) > 0 {
		for iNdEx := len(m.BotList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BotList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHttpDto(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BotLoginAsyncReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BotLoginAsyncReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BotLoginAsyncReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BotId != 0 {
		i = encodeVarintHttpDto(dAtA, i, uint64(m.BotId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BotLoginAsyncResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BotLoginAsyncResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BotLoginAsyncResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *Captcha) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Captcha) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Captcha) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size := m.Data.Size()
			i -= size
			if _, err := m.Data.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CaptchaType != 0 {
		i = encodeVarintHttpDto(dAtA, i, uint64(m.CaptchaType))
		i--
		dAtA[i] = 0x10
	}
	if m.BotId != 0 {
		i = encodeVarintHttpDto(dAtA, i, uint64(m.BotId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Captcha_Url) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Captcha_Url) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Url)
	copy(dAtA[i:], m.Url)
	i = encodeVarintHttpDto(dAtA, i, uint64(len(m.Url)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *Captcha_Image) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Captcha_Image) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Image != nil {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintHttpDto(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *GetCaptchaListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCaptchaListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCaptchaListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetCaptchaListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCaptchaListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCaptchaListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CaptchaList) > 0 {
		for iNdEx := len(m.CaptchaList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CaptchaList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHttpDto(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SolveCaptchaReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SolveCaptchaReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SolveCaptchaReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintHttpDto(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0x12
	}
	if m.BotId != 0 {
		i = encodeVarintHttpDto(dAtA, i, uint64(m.BotId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SolveCaptchaResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SolveCaptchaResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SolveCaptchaResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintHttpDto(dAtA []byte, offset int, v uint64) int {
	offset -= sovHttpDto(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Bot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotId != 0 {
		n += 1 + sovHttpDto(uint64(m.BotId))
	}
	if m.IsOnline {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateBotReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotId != 0 {
		n += 1 + sovHttpDto(uint64(m.BotId))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovHttpDto(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateBotResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListBotReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListBotResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BotList) > 0 {
		for _, e := range m.BotList {
			l = e.Size()
			n += 1 + l + sovHttpDto(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BotLoginAsyncReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotId != 0 {
		n += 1 + sovHttpDto(uint64(m.BotId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BotLoginAsyncResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Captcha) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotId != 0 {
		n += 1 + sovHttpDto(uint64(m.BotId))
	}
	if m.CaptchaType != 0 {
		n += 1 + sovHttpDto(uint64(m.CaptchaType))
	}
	if m.Data != nil {
		n += m.Data.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Captcha_Url) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	n += 1 + l + sovHttpDto(uint64(l))
	return n
}
func (m *Captcha_Image) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Image != nil {
		l = len(m.Image)
		n += 1 + l + sovHttpDto(uint64(l))
	}
	return n
}
func (m *GetCaptchaListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCaptchaListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CaptchaList) > 0 {
		for _, e := range m.CaptchaList {
			l = e.Size()
			n += 1 + l + sovHttpDto(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SolveCaptchaReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotId != 0 {
		n += 1 + sovHttpDto(uint64(m.BotId))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovHttpDto(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SolveCaptchaResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovHttpDto(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHttpDto(x uint64) (n int) {
	return sovHttpDto(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Bot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHttpDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOnline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOnline = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipHttpDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateBotReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHttpDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateBotReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateBotReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHttpDto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHttpDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHttpDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateBotResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHttpDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateBotResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateBotResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHttpDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBotReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHttpDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBotReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBotReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHttpDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBotResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHttpDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBotResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBotResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHttpDto
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHttpDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BotList = append(m.BotList, &Bot{})
			if err := m.BotList[len(m.BotList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHttpDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BotLoginAsyncReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHttpDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BotLoginAsyncReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BotLoginAsyncReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHttpDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BotLoginAsyncResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHttpDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BotLoginAsyncResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BotLoginAsyncResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHttpDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Captcha) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHttpDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Captcha: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Captcha: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaType", wireType)
			}
			m.CaptchaType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptchaType |= Captcha_CaptchaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHttpDto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHttpDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = &Captcha_Url{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHttpDto
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHttpDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Data = &Captcha_Image{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHttpDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCaptchaListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHttpDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCaptchaListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCaptchaListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHttpDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCaptchaListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHttpDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCaptchaListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCaptchaListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHttpDto
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHttpDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaptchaList = append(m.CaptchaList, &Captcha{})
			if err := m.CaptchaList[len(m.CaptchaList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHttpDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SolveCaptchaReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHttpDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SolveCaptchaReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SolveCaptchaReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHttpDto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHttpDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHttpDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SolveCaptchaResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHttpDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SolveCaptchaResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SolveCaptchaResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHttpDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHttpDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHttpDto(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHttpDto
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHttpDto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHttpDto
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHttpDto
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHttpDto
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHttpDto        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHttpDto          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHttpDto = fmt.Errorf("proto: unexpected end of group")
)
